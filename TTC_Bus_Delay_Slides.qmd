---
title: "Toronto Transit Commission (TTC) Bus Delay"
subtitle: "Group 4"
author: "Agam Sanghera, Ashita Diwan, Cheng Zhang, Yichun Liu"
format: revealjs
---


## Introduction
![Source: Toronto Star](images/ttc_bus_crowded.avif)

## Introduction
![Source: Toronto Observer](images/ttc_bus_delay.png)

## Introduction
- Importance of the topic
    - Impacts on commuters
    - Effects on transportation network

## Introduction
- Purpose of the report
    - To analyze bus delays in the TTC system
    - To identify key patterns, causes, and potential solutions for these delays

## Introduction
- End product: build a logistic regression model to predict future bus delay duration
    - Better allocate resources
    - Enhance bus service precision

## Objectives
- Understand the primary causes of bus delays.
- Analyze trends based on data (e.g., time of day, location, type of delay).
- Provide actionable insights to improve service efficiency.

![](images/objectives.png)

## Methodology

**Data Source:** TTC bus delay logs.

**Techniques Used:**

- Statistical methods to identify trends and correlations.

- Data visualization for pattern recognition.

**Tools/Software:** Python (Pandas, Matplotlib, Seaborn).

![](images/methodology.png)

# Analysis {style="text-align: center"}


## Analysis
1. **Loading and Preprocessing Data** 
2. **Visualization** 
3. **Modelling**

## Analysis: Loading and Preprocessing Data 
- Handle missing values 
// ... existing code ...

## Analysis: Loading and Preprocessing Data 
- Handle missing values 
- Convert to appropriate datatypes
![](images/data_conversion.png){.absolute top=225 right=30}
```{python}
#| echo: true
import pandas as pd
# Load the data
ttc = pd.read_csv('data/raw/ttc-bus-delay-data-2024.csv', parse_dates=['Date'])

# Create ttc1 as a copy and process it
ttc1 = ttc.copy()
ttc1['Time'] = pd.to_datetime(ttc['Time']).dt.time
ttc1['Date_'] = ttc1['Date'].dt.date
ttc1['Month'] = ttc1['Date'].dt.month
ttc1['Hour'] = ttc1['Time'].map(lambda x: x.hour)
ttc1 = ttc1.drop(columns=['Date', 'Time'])

# Show missing values
print(ttc1.isna().sum())
```

// ... rest of existing code ...
- Convert to appropriate datatypes
![](images/data_conversion.png){.absolute top=225 right=30}


## Analyze distribution of delays 
![](notebooks/delay_dist.png){fig-align="center"}

## Identify top routes and locations with frequent delay incidents
![](notebooks/top20_delay_routes.png){fig-align="center"}

## Visualize delays based on day and incident type
![](notebooks/chart_month.png){fig-align="left" width="500" height="550"}
![](notebooks/chart_incident.png){fig-align="right" width="500" height="500"}

## Analysis: Modelling
- Logistic Regression model to predict
    - "Short", "Medium" or "Long" duration
- Cross-validation and randomized grid for hyperparameter tuning

# Results and Conclusions {style="text-align: center"}

## Results
- **EDA** 
- **Model** 

## EDA
- **Distributions** 
- **Reclassified Labels** 

## Distribution: Monthly Incidents
![](results/images/incidents_by_month.png){fig-align="center"}

## Distribution: Daily Incidents
![](results/images/incidents_by_day.png){fig-align="center"}

## Distribution: Hourly Incidents
![](results/images/incidents_by_hour.png){fig-align="center"}

## Distribution of Delays
![](notebooks/delay_dist.png){fig-align="center"}

## Reclassification of Delays
![](results/images/ReclassifiedLabels.png){fig-align="center"}


## Model
- **Model Scores** 
- **Hyperparameter Tuning**
- **Cross Validation**

## Conclusion
- **Interpretation**
- **Future Scope**

## Interpretation
- **Comparison of Actual vs Prediction**
- **Exlpanation of Results**

## Future Scope
- **Improve Prediction of Long Delays**
- **Experiment with other techniques**

# Thank you for your attention {style="text-align: center"}